// Generated by Molecule 0.8.0

use super::base::*;
use molecule::prelude::*;
#[derive(Clone)]
pub struct VaultCellData(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for VaultCellData {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for VaultCellData {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for VaultCellData {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "campaign_id", self.campaign_id())?;
        write!(f, ", {}: {}", "fee_percentage", self.fee_percentage())?;
        write!(
            f,
            ", {}: {}",
            "proof_script_code_hash",
            self.proof_script_code_hash()
        )?;
        write!(f, " }}")
    }
}
impl ::core::default::Default for VaultCellData {
    fn default() -> Self {
        let v = molecule::bytes::Bytes::from_static(&Self::DEFAULT_VALUE);
        VaultCellData::new_unchecked(v)
    }
}
impl VaultCellData {
    const DEFAULT_VALUE: [u8; 66] = [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0,
    ];
    pub const TOTAL_SIZE: usize = 66;
    pub const FIELD_SIZES: [usize; 3] = [32, 2, 32];
    pub const FIELD_COUNT: usize = 3;
    pub fn campaign_id(&self) -> Byte32 {
        Byte32::new_unchecked(self.0.slice(0..32))
    }
    pub fn fee_percentage(&self) -> Uint16 {
        Uint16::new_unchecked(self.0.slice(32..34))
    }
    pub fn proof_script_code_hash(&self) -> Byte32 {
        Byte32::new_unchecked(self.0.slice(34..66))
    }
    pub fn as_reader<'r>(&'r self) -> VaultCellDataReader<'r> {
        VaultCellDataReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for VaultCellData {
    type Builder = VaultCellDataBuilder;
    const NAME: &'static str = "VaultCellData";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        VaultCellData(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        VaultCellDataReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        VaultCellDataReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .campaign_id(self.campaign_id())
            .fee_percentage(self.fee_percentage())
            .proof_script_code_hash(self.proof_script_code_hash())
    }
}
#[derive(Clone, Copy)]
pub struct VaultCellDataReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for VaultCellDataReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for VaultCellDataReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for VaultCellDataReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "campaign_id", self.campaign_id())?;
        write!(f, ", {}: {}", "fee_percentage", self.fee_percentage())?;
        write!(
            f,
            ", {}: {}",
            "proof_script_code_hash",
            self.proof_script_code_hash()
        )?;
        write!(f, " }}")
    }
}
impl<'r> VaultCellDataReader<'r> {
    pub const TOTAL_SIZE: usize = 66;
    pub const FIELD_SIZES: [usize; 3] = [32, 2, 32];
    pub const FIELD_COUNT: usize = 3;
    pub fn campaign_id(&self) -> Byte32Reader<'r> {
        Byte32Reader::new_unchecked(&self.as_slice()[0..32])
    }
    pub fn fee_percentage(&self) -> Uint16Reader<'r> {
        Uint16Reader::new_unchecked(&self.as_slice()[32..34])
    }
    pub fn proof_script_code_hash(&self) -> Byte32Reader<'r> {
        Byte32Reader::new_unchecked(&self.as_slice()[34..66])
    }
}
impl<'r> molecule::prelude::Reader<'r> for VaultCellDataReader<'r> {
    type Entity = VaultCellData;
    const NAME: &'static str = "VaultCellDataReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        VaultCellDataReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
#[derive(Clone, Debug, Default)]
pub struct VaultCellDataBuilder {
    pub(crate) campaign_id: Byte32,
    pub(crate) fee_percentage: Uint16,
    pub(crate) proof_script_code_hash: Byte32,
}
impl VaultCellDataBuilder {
    pub const TOTAL_SIZE: usize = 66;
    pub const FIELD_SIZES: [usize; 3] = [32, 2, 32];
    pub const FIELD_COUNT: usize = 3;
    pub fn campaign_id(mut self, v: Byte32) -> Self {
        self.campaign_id = v;
        self
    }
    pub fn fee_percentage(mut self, v: Uint16) -> Self {
        self.fee_percentage = v;
        self
    }
    pub fn proof_script_code_hash(mut self, v: Byte32) -> Self {
        self.proof_script_code_hash = v;
        self
    }
}
impl molecule::prelude::Builder for VaultCellDataBuilder {
    type Entity = VaultCellData;
    const NAME: &'static str = "VaultCellDataBuilder";
    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(self.campaign_id.as_slice())?;
        writer.write_all(self.fee_percentage.as_slice())?;
        writer.write_all(self.proof_script_code_hash.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        VaultCellData::new_unchecked(inner.into())
    }
}
